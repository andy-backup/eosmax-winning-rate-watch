{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["scatter","network","blockchain","protocol","host","port","chainId","bet_id","win","lose","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","startTime","Date","toString","handleAutoLog","bind","assertThisInitialized","handleLog","handleLogin","_this2","callback","arguments","length","undefined","ScatterJS","plugins","ScatterEOS","connect","then","connected","login","eos","Eos","expireInSeconds","getTableRows","res","rows","_loop","i","row","roll_border","findIndex","value","randnum","push","setState","interval","setInterval","total","percent","react_default","a","createElement","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2NAaIA,8IAREC,EAAU,CACZC,WAAW,MACXC,SAAS,QACTC,KAAK,wBACLC,KAAK,IACLC,QAAQ,oEAIRC,EAAS,GACTC,EAAM,EACNC,EAAO,EAoFIC,cAnCb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAAEX,IAAK,EAAGC,KAAM,EAAGW,WAAW,IAAIC,MAAOC,YACtDV,EAAKW,cAAgBX,EAAKW,cAAcC,KAAnBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KACrBA,EAAKc,UAAYd,EAAKc,UAAUF,KAAfX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KACjBA,EAAKe,cALYf,6EAQL,IAAAgB,EAAAb,MAtDF,WAAyB,IAAxBc,EAAwBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAb,aACtBG,IAAUC,QAAS,IAAIC,KACvBF,IAAUjC,QAAQoC,QAAQ,UAAUC,KAAK,SAAAC,GACrC,IAAIA,EAAW,OAAO,EACtBtC,EAAUiC,IAAUjC,QACpB6B,MAkDJU,CAAO,WACHX,EAAKL,sDA7CGvB,EAAQwC,IAAIvC,EAASwC,IADd,CAAEC,gBAAiB,KAGbC,cAAa,EAAM,eAAgB,eAAgB,YAAa,SAAU,GAAI,EAAG,KAC7FN,KAAK,SAACO,GACf,GAAIA,GAAOA,EAAIC,KAAM,KAAAC,EAAA,SACTC,GACJ,IAAIC,EAAMJ,EAAIC,KAAKE,GAMnB,OAAwB,KAApBC,EAAIC,YACJ,YAG8D,IAA9D1C,EAAO2C,UAAU,SAACC,GAAS,OAAOA,IAAUH,EAAIzC,SAChD,YAGAyC,EAAIC,aAAeD,EAAII,QAEvB3C,IAGAD,SAEJD,EAAO8C,KAAKL,EAAIzC,UAtBpB,IAAI,IAAIwC,KAAKH,EAAIC,KAAMC,EAAfC,MA8ChBhC,KAAKuC,SAAS,CAAE9C,IAAKA,EAAKC,KAAMA,4CAIhCM,KAAKwC,SAAWC,YAAYzC,KAAKW,UAAW,sCAI5C,IAAM+B,EAAQ1C,KAAKI,MAAMX,IAAMO,KAAKI,MAAMV,KACpCiD,EAAW3C,KAAKI,MAAMX,IAAOiD,EAAS,KAAQ,EACpD,OACEE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,mBAAWJ,EAAX,UAAyB1C,KAAKI,MAAMX,IAApC,WAAiDO,KAAKI,MAAMV,KAA5D,cAA6EiD,EAA7E,MACAC,EAAAC,EAAAC,cAAA,8BAAsB9C,KAAKI,MAAMC,mBA9BvB2C,aCpDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOX,EAAAC,EAAAC,cAACU,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,KAAK,SAAAwC,GACjCA,EAAaC","file":"static/js/main.c0e9929a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ScatterJS from 'scatterjs-core';\nimport ScatterEOS from 'scatterjs-plugin-eosjs2';\nimport Eos from 'eosjs';\n\nconst network = {\n    blockchain:'eos',\n    protocol:'https',\n    host:'nodes.get-scatter.com',\n    port:443,\n    chainId:'aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906'\n}\n\nlet scatter;\nlet bet_id = [];\nlet win = 0;\nlet lose = 0;\n// let watch = [\"eosio\"];\n\nconst login = (callback = () => {}) => {\n    ScatterJS.plugins( new ScatterEOS() );\n    ScatterJS.scatter.connect('My-App').then(connected => {\n        if(!connected) return false;\n        scatter = ScatterJS.scatter;\n        callback();\n    });\n}\n\nconst getLog = () => {\n    const eosOptions = { expireInSeconds: 60 };\n    const eos = scatter.eos(network, Eos, eosOptions);\n    // {\"json\":true,\"code\":\"eosmaxiodice\",\"scope\":\"eosmaxiodice\",\"table\":\"betresult\",\"tableKey\":\"string\",\"lower_bound\":0,\"limit\":100}\n    const getTableRows = eos.getTableRows(true, \"eosmaxiodice\", \"eosmaxiodice\", \"betresult\", \"string\", 0, -1, 100);\n    getTableRows.then((res) => {\n        if (res && res.rows) {\n            for(let i in res.rows) {\n                let row = res.rows[i];\n                // 排除非关注账号\n                // if (watch.findIndex((value)=>{return value === row.bettor}) === -1) {\n                //     continue\n                // }\n                // 仅关注96概率的下注\n                if (row.roll_border !== 96) {\n                    continue\n                }\n                // 排除重复ID\n                if (bet_id.findIndex((value)=>{return value === row.bet_id}) !== -1) {\n                    continue\n                }\n                \n                if (row.roll_border <= row.randnum) {\n                    // lose\n                    lose++\n                } else {\n                    // win\n                    win++\n                }\n                bet_id.push(row.bet_id);\n            }\n        }\n    })\n}\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { win: 0, lose: 0, startTime: new Date().toString() };\n    this.handleAutoLog = this.handleAutoLog.bind(this);\n    this.handleLog = this.handleLog.bind(this);\n    this.handleLogin()\n  }\n\n  handleLogin() {\n    login( () => {\n        this.handleAutoLog()\n    } );\n  }\n\n  handleLog() {\n    getLog()\n    this.setState({ win: win, lose: lose })\n  }\n\n  handleAutoLog() {\n    this.interval = setInterval(this.handleLog, 1000)\n  }\n\n  render() {\n    const total = this.state.win + this.state.lose;\n    const percent = (this.state.win / (total) * 100) || 0;\n    return (\n      <div className=\"App\">\n        <p>total: {total}, win: {this.state.win}, lose: {this.state.lose}, percent: {percent} %</p>\n        <p>watch start time: {this.state.startTime}</p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}